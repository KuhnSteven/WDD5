{"version":3,"sources":["components/Nav.js","components/Header.js","pages/Pg1.js","pages/Pg2.js","pages/Pg3.js","components/Main.js","components/Footer.js","App.js","registerServiceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","NavLink","to","Component","Header","className","components_Nav","Pg1","state","picofDay","cameraGallery","spaceWeather","_this2","this","apiKey","picofDayAPI","concat","fetch","then","res","json","console","log","setState","cameraGalleryAPI","photos","marsWeatherAPI","Pg2","Pg3","Main","Route","exact","path","component","Footer","index_esm","App","BrowserRouter","components_Header","components_Main","components_Footer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a69f5e69.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {NavLink} from 'react-router-dom'\n\nclass Nav extends Component {\n  render() {\n    return (\n      <nav>\n        <NavLink to=\"/Pg1\">Link 1</NavLink>\n        <NavLink to=\"/Pg2\">Link 2</NavLink>\n        <NavLink to=\"/Pg3\">Link 3</NavLink>\n      </nav>\n    );\n  }\n}\n\nexport default Nav;\n","import React, { Component } from 'react';\nimport Nav from './Nav'\n\nclass Header extends Component {\n  render() {\n    return (\n      <header className=\"myHeader\">\n      <h3>Title</h3>\n      <Nav />\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, {\n  Component\n} from 'react';\nimport '../App.css';\n\nclass Pg1 extends Component {\n  state = {\n    picofDay: [],\n    cameraGallery: [],\n    spaceWeather: []\n  };\n\n\n  componentDidMount() {\n    //Photo of the day\n    const apiKey = `E6Ia87NnQyeFUYuqZqKTf9DzLO3WYlGcbmppB1uy`\n    const picofDayAPI = `https://api.nasa.gov/planetary/apod?api_key=${apiKey}`;\n    fetch(picofDayAPI)\n      .then(res => res.json())\n      .then(picofDay => {\n        console.log(picofDay);\n        this.setState({\n          picofDay: picofDay\n        });\n      });\n    //Camera Gallery\n    const cameras = [\"fhaz\", \"rhaz\", \"mast\", \"chemcam\", \"mahli\", \"mardi\", \"navcam\", \"pancam\", \"minites\"];\n    const cameraGalleryAPI = `https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&camera=${cameras[0]}&api_key=${apiKey}`;\n    fetch(cameraGalleryAPI)\n      .then(res => res.json())\n      .then(cameraGallery => {\n        console.log(cameraGallery.photos);\n        this.setState({\n          cameraGallery: cameraGallery.photos\n        });\n      });\n    //Space Weather Activty\n    const spaceWeatherArray = [\"CME\", \"CMEAnalysis\", \"GST\", \"IPS\", \"FLR\", \"SEP\", \"MPC\", \"RBE\", \"HSS\", \"WSAEnlilSimulation\", \"notifications\"];\n    const marsWeatherAPI = `https://api.nasa.gov/DONKI/${spaceWeatherArray[1]}?startDate=2014-05-01&endDate=2014-05-08&type=all&api_key=${apiKey}`;\n    fetch(marsWeatherAPI)\n      .then(res => res.json())\n      .then(spaceWeather => {\n        console.log(spaceWeather);\n        this.setState({\n          spaceWeather: spaceWeather\n        });\n      });\n  }\n\n\n\n  render() {\n    return ( < section >\n      Link 1 < /section>\n    );\n  }\n}\n\nexport default Pg1;","import React, { Component } from 'react';\nimport '../App.css';\n\nclass Pg2 extends Component {\n  render() {\n    return (\n      <section>\n        Link 2\n      </section>\n    );\n  }\n}\n\nexport default Pg2;\n","import React, { Component } from 'react';\nimport '../App.css';\n\nclass Pg3 extends Component {\n  render() {\n    return (\n      <section>\n        Link 3\n      </section>\n    );\n  }\n}\n\nexport default Pg3;\n","import React, { Component } from 'react';\nimport {Route} from 'react-router-dom'\n\nimport Pg1 from '../pages/Pg1'\nimport Pg2 from '../pages/Pg2'\nimport Pg3 from '../pages/Pg3'\n\nclass Main extends Component {\n  render() {\n    return (\n      <section>\n        <Route exact path='/' component={Pg1} />\n        <Route exact path='/Pg1' component={Pg1} />\n        <Route exact path='/Pg2' component={Pg2} />\n        <Route exact path='/Pg3' component={Pg3} />\n      </section>\n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from 'react';\nimport {NavLink} from 'react-router-dom';\nimport {FaHome} from 'react-icons/fa'\nimport {FaHandPeace} from 'react-icons/fa'\nimport {FaGithubAlt} from 'react-icons/fa'\n\nclass Footer extends Component {\n  render() {\n    return (\n      <footer>\n        <NavLink to=\"/Pg1\"><FaHome /></NavLink>\n        <NavLink to=\"/Pg2\"><FaHandPeace /></NavLink>   \n        <NavLink to=\"/Pg3\"><FaGithubAlt /></NavLink>    \n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport Footer from './components/Footer';\nimport {BrowserRouter as Router} from 'react-router-dom'\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Header />\n          <Main />\n          <Footer />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}